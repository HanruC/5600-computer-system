(First Order - Thread A is signaled first after the C signals)
0.0, A, 4  (A locks mutex)
0.0, A, 6 [count -> 1]  (A increments count)
0.0, A, 7  (A chcek if count < 3, decide to wait) 
1.0, B, 4  (B locks mutex after A waits) 
1.0, B, 6 [count -> 2]  (B increments count) 
1.0, B, 7  (B check if count < 3, wait here) 
1.0, C, 4  (C locks mutex after B waits) 
1.0, C, 6 [count -> 3]  (C increments count)
1.0, C, 7  (check if count < 3, but now do not wait here) 
1.0, C, 7.2  (C signals to wake one thread between A and B)
1.0, C, 8 [count -> 0]  (C sets count to 0)
1.0, C, 9  (C unlocks mutex)
1.0, A, 4  (A wakes, acquires the mutex again)
1.0, A, 8  [count -> 0]  (A notices the count reset to 0)
1.0, A, 9  (A unlocks mutex)
1.0, B, 4  (B wakes, acquires the mutex again) 
1.0, B, 8 [count -> 0]  (B notices the count reset to 0) 
1.0, B, 9  (B unlocks mutex) 

(Second Order - Thread B is signaled first after the C signals)
0.0, A, 4  (A locks mutex)
0.0, A, 6 [count -> 1]  (A increments count)
0.0, A, 7  (A chcek if count < 3, decide to wait) 
1.0, B, 4  (B locks mutex after A waits) 
1.0, B, 6 [count -> 2]  (B increments count) 
1.0, B, 7  (B check if count < 3, wait here) 
1.0, C, 4  (C locks mutex after B waits) 
1.0, C, 6 [count -> 3]  (C increments count)
1.0, C, 7  (check if count < 3, but now do not wait here) 
1.0, C, 7.2  (C signals to wake one thread between A and B)
1.0, C, 8 [count -> 0]  (C sets count to 0)
1.0, C, 9  (C unlocks mutex)
1.0, B, 4   (B wakes, acquires the mutex again)
1.0, B, 8 [count → 0]  (B notices count reset to 0)
1.0, B, 9   (B unlocks mutex)
1.0, A, 4   (A wakes, acquires the mutex again) 
1.0, A, 8 [count → 0]  (A notices the count reset to 0) 
1.0, A, 9   (A unlocks mutex)